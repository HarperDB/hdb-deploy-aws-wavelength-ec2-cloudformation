AWSTemplateFormatVersion: 2010-09-09
Description: 
  Creates an EC2 instance in a Wavelength Zone, running HarperDB, with a TLS certificate from Let's Encrypt, and Nginx 
  forwarding requests to either the HarperDB API or HarperDB Custom Functions.
Parameters:
  VPC:
    Description: VPC for EC2 instance
    Type: AWS::EC2::VPC::Id
  AvailabilityZone:
    Description: Wavelength Zone for EC2 instance
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-west-2-wl1-den-wlz-1
  Subnet:
    Description: Subnet for EC2 instance
    Type: AWS::EC2::Subnet::Id
  InstanceType:
    Description: Wavelength EC2 instance type
    Type: String
    Default: t3.medium
  KeyName:
    Description: Name of key pair to install on EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
  RootVolumeSize:
    Description: Size of EC2 instance root volume
    Type: String
    Default: 8
  RootVolumeType:
    Description: EBS type for EC2 instance root volume
    Type: String
    Default: gp2
  DataVolumeSize:
    Description: Size of EBS volume for HarperDB data and config
    Type: String
    Default: 10
  DataVolumeType:
    Description: EBS type for HarperDB data and config
    Type: String
    Default: gp2
  Fqdn:
    Description: FQDN for HarperDB API
    Type: String
  FqdnCf:
    Description: FQDN for HarperDB Custom Functions
    Type: String
  HdbAdminUsername:
    Description: HarperDB admin username
    Type: String
    NoEcho : true
    Default: HDB_ADMIN
  HdbAdminPassword:
    Description: HarperDB admin password
    Type: String
    NoEcho : true
  IamInstanceProfile:
    Description: IAM instance profile that allows Certbot to create and clean up DNS challenge TXT records in Route53
    Type: String
  LatestAmiId:
    Description: Lookup latest Ubuntu Server 20.04 amd64 AMI
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
Resources:
  SecurityGroup:
    Description: Security Group for EC2 instance
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow 80, 443, and 12345
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 12345
          ToPort: 12345
          CidrIp: 0.0.0.0/0
  EC2Instance:
    Description: EC2 instance running HarperDB, Nginx, and Certbot
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - SubnetId: !Ref Subnet
          GroupSet:
            - !Ref SecurityGroup
          AssociateCarrierIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref RootVolumeType
            VolumeSize: !Ref RootVolumeSize
      Volumes:
        - Device: /dev/sdf
          VolumeId: !Ref DataVolume
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash

              # Create 2GB swap file
              dd if=/dev/zero of=/swapfile bs=128M count=16
              chmod 600 /swapfile
              mkswap /swapfile
              swapon /swapfile
              echo '/swapfile swap swap defaults 0 0' | tee -a /etc/fstab

              # Find free disk and create logical volume
              used_disk=$(lsblk -P -I 259 | grep  "nvme.n1.*part" | grep -o "nvme.n1")
              declare -a free_disk
              mapfile -t free_disk < <(lsblk -P -I 259 | grep  "nvme.n1.*disk"  | grep -o "nvme.n1" | grep -v "$used_disk")
              pvcreate "/dev/$free_disk"
              vgcreate hdb_vg "/dev/$free_disk"
              lvcreate -n hdb_lv -i 1 -l 100%FREE hdb_vg

              # Create file system on logical volume and mount it
              mkfs.ext4 -L hdb_data /dev/hdb_vg/hdb_lv
              mkdir /home/ubuntu/hdb
              mount -t ext4 /dev/hdb_vg/hdb_lv /home/ubuntu/hdb  
              chown -R ubuntu:ubuntu /home/ubuntu/hdb
              chmod 775 /home/ubuntu/hdb
              echo "LABEL=hdb_data /home/ubuntu/hdb ext4 defaults,noatime 0 1" | tee -a /etc/fstab

              # Install GCC and Make
              apt-get update && apt-get install -y build-essential

              # Install Node Version Manager and Node.js
              /bin/su -l ubuntu -c \
                'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash'
              /bin/su -l ubuntu -c \
                'export NVM_DIR="$HOME/.nvm" && \. "$NVM_DIR/nvm.sh" && nvm install 14.17.3'
                                                
              # Install HarperDB
              /bin/su -l ubuntu -c \
                'export NVM_DIR="$HOME/.nvm" \
                && \. "$NVM_DIR/nvm.sh" \
                && npm install -g harperdb@3.1.3 \
                && harperdb \
                  --TC_AGREEMENT yes \
                  --HDB_ROOT /home/ubuntu/hdb \
                  --SERVER_PORT 9925 \
                  --HDB_ADMIN_USERNAME ${HdbAdminUsername} \
                  --HDB_ADMIN_PASSWORD ${HdbAdminPassword}'

              # Add cron job to start HarperDB on startup
              /bin/su -l ubuntu -c \
                '(crontab -l 2>/dev/null; echo "@reboot PATH=\"/home/ubuntu/.nvm/versions/node/v14.17.3/bin:$PATH\" && harperdb") | crontab -'

              # Install Certbot and Route53 plugin
              snap install core
              snap refresh core              
              snap install --classic certbot
              snap set certbot trust-plugin-with-root=ok
              snap install certbot-dns-route53

              # Run Certbot to request a certificate from Let's Encypt 
              # Include both HarperDB API FQDN and HarperDB Custom Functions FQDN
              certfile=/etc/letsencrypt/live/${Fqdn}/fullchain.pem
              keyfile=/etc/letsencrypt/live/${Fqdn}/privkey.pem

              until [ -s "$certfile" ] && [ -s "$keyfile" ]
              do
                  certbot \
                    certonly \
                    --verbose \
                    --dns-route53 \
                    --agree-tos \
                    --register-unsafely-without-email \
                    --dns-route53-propagation-seconds 120 \
                    -d ${Fqdn} \
                    -d ${FqdnCf}
                  sleep 10s
              done

              # Install and configure Nginx
              # Redirect port 80 to 443
              # Listen on 443 and send to either HarperDB API or HarperDB Custom Functions based on host header
              apt-get install -y nginx
              rm /etc/nginx/sites-enabled/default
              cat << EOF > /etc/nginx/sites-available/harperdb
                server {
                  listen 80;
                  return 301 https://\$host\$request_uri;
                }
                server {
                  listen 443;
                  server_name ${Fqdn};

                  ssl_certificate           /etc/letsencrypt/live/${Fqdn}/fullchain.pem;
                  ssl_certificate_key       /etc/letsencrypt/live/${Fqdn}/privkey.pem;

                  ssl on;
                  ssl_session_cache  builtin:1000  shared:SSL:10m;
                  ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
                  ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
                  ssl_prefer_server_ciphers on;

                  access_log            /var/log/nginx/access.log;

                  location / {

                    proxy_set_header        Host \$host;
                    proxy_set_header        X-Real-IP \$remote_addr;
                    proxy_set_header        X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header        X-Forwarded-Proto \$scheme;

                    proxy_pass          http://localhost:9925;
                    proxy_read_timeout  90;

                    proxy_redirect      http://localhost:9925 https://${Fqdn};
                  }
                }
                server {
                  listen 443;
                  server_name ${FqdnCf};

                  ssl_certificate           /etc/letsencrypt/live/${Fqdn}/fullchain.pem;
                  ssl_certificate_key       /etc/letsencrypt/live/${Fqdn}/privkey.pem;

                  ssl on;
                  ssl_session_cache  builtin:1000  shared:SSL:10m;
                  ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
                  ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
                  ssl_prefer_server_ciphers on;

                  access_log            /var/log/nginx/access.log;

                  location / {

                    proxy_set_header        Host \$host;
                    proxy_set_header        X-Real-IP \$remote_addr;
                    proxy_set_header        X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header        X-Forwarded-Proto \$scheme;

                    proxy_pass          http://localhost:9926;
                    proxy_read_timeout  90;

                    proxy_redirect      http://localhost:9926 https://${FqdnCf};
                  }
                }
              EOF
              ln -s /etc/nginx/sites-available/harperdb /etc/nginx/sites-enabled/harperdb
              systemctl reload nginx.service
              
              # Run CloudFormation helper scripts
              wget \
                -nv https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz \
                -O /home/ubuntu/aws-cfn-bootstrap-py3-latest.tar.gz
              tar -xvf /home/ubuntu/aws-cfn-bootstrap-py3-latest.tar.gz -C /home/ubuntu/
              cd /home/ubuntu/aws-cfn-bootstrap-2.0/
              python3 setup.py build
              python3 setup.py install
              /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
              rm -f /home/ubuntu/aws-cfn-bootstrap-py3-latest.tar.gz
              rm -rf /home/ubuntu/aws-cfn-bootstrap-2.0/
              cd ~/
      IamInstanceProfile: !Ref IamInstanceProfile
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
  DataVolume:
    Description: EBS volume for HarperDB data and config
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      VolumeType: !Ref DataVolumeType
      Size: !Ref DataVolumeSize
    DeletionPolicy: Delete
  EIP:
    Description: Carrier IP address for EC2 instance
    Type: AWS::EC2::EIP
    Properties:
      NetworkBorderGroup: !Ref AvailabilityZone
      InstanceId: !Ref EC2Instance